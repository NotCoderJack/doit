import groovy.text.SimpleTemplateEngine

buildscript {
    repositories {
        for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
            maven { url(mavenRepositoryUrl) }
        }
    }
}
plugins {
    id "java"
    id "org.inferred.processors" version "3.3.0"
    id "org.springframework.boot" version "2.2.2.RELEASE"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

group = project.rootProject.ext.constructGroupName("", project.getName())
version = project.rootProject.constructVersion()
sourceCompatibility = project.rootProject.ext.javaVersion
targetCompatibility = project.rootProject.ext.javaVersion

repositories {
    for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
        maven { url(mavenRepositoryUrl) }
    }
}

dependencies {
    processor "org.inferred:freebuilder:2.6.1"
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation(project.rootProject.ext.jarDependency("com.google.guava", "guava"))
    implementation(project.rootProject.ext.jarDependency("org.apache.commons", "commons-lang3"))
    implementation(project.rootProject.ext.jarDependency("commons-io", "commons-io"))
    implementation(project.rootProject.ext.jarDependency("com.fasterxml.jackson.core", "jackson-core"))
    implementation(project.rootProject.ext.jarDependency("com.fasterxml.jackson.core", "jackson-databind"))
    implementation(project.rootProject.ext.jarDependency("com.fasterxml.jackson.core", "jackson-annotations"))
    implementation(project.rootProject.ext.jarDependency("com.h2database", "h2"))
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation(project.rootProject.ext.jarDependency("junit", "junit"))
}
test {
    useJUnitPlatform()
}

def jarBaseName = "${project.getName()}-with-dependencies"
def jarPath = "${project.buildDir}/libs/${jarBaseName}-${project.getVersion()}.jar"
bootJar {
    baseName(jarBaseName)
}

def applicationConfigPath = "${project.buildDir}/application.yaml"
def frontendPath = "${project(":frontend").file("build/dist/")}"
task renderApplicationConfig() {
    doLast {
        def templateText = project.file("template/application.yaml").text
        def binding = [
                "frontend_absolute_path": frontendPath,
                "doit_data_path"        : project.file("data/username.data"),
                "application_h2_db_path": "${project.buildDir}/application.db.h2",
        ]
        def engine = new SimpleTemplateEngine()
        def applicationConfigContent = engine.createTemplate(templateText).make(binding)
        project.file(applicationConfigPath).text = applicationConfigContent
    }
}

task runLocal(type: Exec) {
    commandLine(
            "java",
            "-jar", jarPath,
            "--spring.config.location=file:${applicationConfigPath}",
    )
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    dependsOn(renderApplicationConfig)
    dependsOn(":frontend:yarnBuild")
    dependsOn(bootJar)
}
