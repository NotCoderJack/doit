buildscript {
    repositories {
        for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
            maven { url(mavenRepositoryUrl) }
        }
    }
}
plugins {
    id "java"
    id "org.inferred.processors" version "3.3.0"
    id "org.springframework.boot" version "2.2.2.RELEASE"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

group = project.rootProject.ext.constructGroupName("", project.getName())
version = project.rootProject.constructVersion()
sourceCompatibility = project.rootProject.ext.javaVersion
targetCompatibility = project.rootProject.ext.javaVersion

repositories {
    for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
        maven { url(mavenRepositoryUrl) }
    }
}

dependencies {
    processor "org.inferred:freebuilder:2.6.1"
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation(project.rootProject.ext.jarDependency("com.google.guava", "guava"))
    implementation(project.rootProject.ext.jarDependency("org.apache.commons", "commons-lang3"))
    implementation(project.rootProject.ext.jarDependency("commons-io", "commons-io"))
    implementation(project.rootProject.ext.jarDependency("com.fasterxml.jackson.core", "jackson-core"))
    implementation(project.rootProject.ext.jarDependency("com.fasterxml.jackson.core", "jackson-databind"))
    implementation(project.rootProject.ext.jarDependency("com.fasterxml.jackson.core", "jackson-annotations"))
    implementation(project.rootProject.ext.jarDependency("com.h2database", "h2"))
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation(project.rootProject.ext.jarDependency("junit", "junit"))
}
test {
    useJUnit()
}

def mainClass = "tech.geekcity.application.doit.Application"
def jarBaseName = "${project.getName()}-with-dependencies"
def jarPath = "${project.buildDir}/libs/${jarBaseName}-${project.getVersion()}.jar"
jar {
    manifest {
        attributes "Main-Class": mainClass
    }
    setArchivesBaseName(jarBaseName)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task runLocal(type: Exec) {
    executable("java")
    args(
            "-classpath", "${jarPath}",
            mainClass
    )
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    dependsOn(jar)
}

